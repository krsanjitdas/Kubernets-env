How to deploy ingress to a deployment.
We can use ingress with external loadbalancer or without external load balancer.
Without an external load balancer, expose the NGINX Ingress Controller using:
•	NodePort
•	Host Networking
•	MetalLB (recommended for production in bare-metal setups).

Node Port.
Step1.
#kubectl create deployment --image=nginx web-nodeport --port=80 --dry-run=client -o yaml > web-nodeport
Just Check
vim web-nodeport.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: web-nodeport
  name: web-nodeport
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-nodeport
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: web-nodeport
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
        resources: {}
status: {}

Step2.
create NodePort service
kubectl expose deployment web-nodeport --port 80 --target-port 80  --type NodePort --dry-run=client -o yaml > wev-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: web-nodeport
  name: web-nodeport
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30001       # add the line
  selector:
    app: web-nodeport
  type: NodePort
status:
  loadBalancer: {}


Step3.

Create ingress 

kubectl create ingress web-ing --rule="nginxnode.iimcal.ac.in/=web-nodeport:80" --dry-run=client -o yaml >  web-ing.yaml

edit web-ing.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  name: web-ing
spec:
  ingressClassName: nginx                  ## Add the line
  rules:
  - host: nginxnode.iimcal.ac.in
    http:
      paths:
      - backend:
          service:
            name: web-nodeport
            port:
              number: 80
        path: /
        pathType: Exact
status:
  loadBalancer: {}

Step4.

Now add the following line in /etc/host file.
172.16.1.114 nginxnode.iimcal.ac.in
Step5.
Now test the service
curl nginxnode.iimcal.ac.in:30001

Host Networking.
Step1.
#kubectl create deployment --image=nginx web-hostport --port=80 --dry-run=client -o yaml > web-nodeport
Edit the file web-hostport.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: web-hostport
  name: web-hostport
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-hostport
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: web-hostport
    spec:
      hostNetwork: true  # use for host networking
      dnsPolicy: ClusterFirstWithHostNet  # use for host networking
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
        resources: {}
status: {}
Step 2
Now create SVC 

kubectl expose deployment web-hostport --port 80 --target-port 80  --dry-run=client -o yaml > web-host-svc.yaml

Edit the file web-host-svc.yaml

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: web-host
  name: web-host
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: web-host
status:
  loadBalancer: {}


kubectl create –f web-host-svc.yaml

Step 3
Now create the Ingress file

kubectl create ingress web-ing --rule="nginxnode.iimcal.ac.in/=web-hostport:80" --dry-run=client -o yaml >  web-ing.yaml
Edit the file

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  name: web-ing
spec:
  ingressClassName: nginx    # add the line
  rules:
  - host: nginxport.iimcal.ac.in
    http:
      paths:
      - backend:
          service:
            name: web-hostport
            port:
              number: 80
        path: /
        pathType: Exact
status:
  loadBalancer: {}

Kubectl create -f web-ing.yaml

Step 4
Kubectl get svc                # check the ip address it will get same if of node ip

Now add the following line in /etc/host file.
172.16.1.114 nginxport.iimcal.ac.in

Curl nginxport.iimcal.ac.in

MetalLB (recommended for production in bare-metal setups).
Step1.
# kubectl create deployment web-load --image=nginx --port 80 --dry-run=client -o yaml > web-load.yaml
Edit the file  web-load.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: web-load
  name: web-load
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-load
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: web-load
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
        resources: {}
status: {}

Step 2
Now create SVC 

kubectl expose deployment web-load --port 80 --target-port 80 --type LoadBalancer --dry-run=client -o yaml > web-load-svc.yaml

Edit the file web-load-svc.yaml

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: web-load
  name: web-load
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: web-load
  type: LoadBalancer
status:
  loadBalancer: {}

Step 3
Now create the Ingress file

kubectl create ingress web-ing --rule="nginxnode.iimcal.ac.in/=web-hostport:80" --dry-run=client -o yaml >  web-ing.yaml
Edit the file

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  name: web-ing
spec:
  ingressClassName: nginx    # add the line
  rules:
  - host: nginxload.iimcal.ac.in
    http:
      paths:
      - backend:
          service:
            name: web-load
            port:
              number: 80
        path: /
        pathType: Exact
status:
  loadBalancer: {}

Kubectl create -f web-ing.yaml

Setp 4
root@master-node:/home/iimc/ing-with-nodeport# kubectl get svc
NAME                TYPE           CLUSTER-IP      EXTERNAL-IP    PORT(S)        AGE
web-load            LoadBalancer   10.110.35.173   172.16.1.232   80:32161/TCP   2m12s

Step 5
Now add the following line in /etc/host file.
172.16.1.232 nginxload.iimcal.ac.in
Step 6
Curl nginxload.iimcal.ac.in



